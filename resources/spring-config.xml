<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		">
	
	<!-- 扫描注解Bean,扫描除了exclude-filter指定的bean之外，所有注解了bean，在spring-mvc.xml中对controller层已扫描，同时
		使用use-default-filters="false" 将会导致使用其它注解的bean将不会被扫描，以下配置将 保证@Required、@Autowired及其它注解bean被注入  -->
    <context:component-scan base-package="com.happyants">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>	
	
	<!-- 将Properties配置文件注入给Spring -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>	
	
	<!-- 配置数据源   DriverManagerDataSource: Spring本身也提供了一个简单的数据源实现类,它并没有提供池化连接的机制，每次调用getConnection()获取新连接时，只是简单地创建一个新的连接-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${connection.driver_class}" />  
        <property name="url" value="${connection.url}" />  
        <property name="username" value="${connection.username}" />  
        <property name="password" value="${connection.password}" /> 
	</bean>
	
	<!-- 配置hibernate sessionFactory -->
	<bean id="sessionFactory"  class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>  
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>  
                <prop key="hiberante.format_sql">${hiberante.format_sql}</prop>  
            </props>  
        </property>
        <!-- 扫描实体 -->  
        <property name="packagesToScan">
			<list>
				<value>com.happyants</value>
			</list>
		</property>
    </bean>  
	
    <!-- ~~~~~~~~~~~~~~配置事务开始 ~~~~~~~~~~~~~~~~~~ -->
    <!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- 配置通知,连接点上执行动作 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<!-- hibernate4必须开启事务控制 ，否则getCurrentSession()获取不到  -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="count*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务边界 -->
	<aop:config proxy-target-class="true">
		<!-- execution说明：定义在 happyants包和所有子包为service包中的任意类的任意方法-->
		<aop:pointcut id="txPointcut" expression="execution(* com.happyants..service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
    
    <!--启动spring事务注解功能,若不使用以上事务，只单独使用注解事务，在service层需要事务的方法处需在加入@Transactional,否则dao层hibernate将报错-->  
    <tx:annotation-driven transaction-manager="transactionManager"  proxy-target-class="true"/>  
	<!-- ~~~~~~~~~~~~~~配置事务结束 ~~~~~~~~~~~~~~~~~~ -->
			
</beans>